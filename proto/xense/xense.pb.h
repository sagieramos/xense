/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_PROTO_XENSE_PB_H_INCLUDED
#define PB_PROTO_XENSE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _Xense_data {
    /* Basic Information */
    uint32_t hardware_id; /* Hardware ID */
    float battery_capacity; /* Battery Capacity (%) */
    float absolute_load_power; /* Absolute Load Power (Watts) */
    float load_power; /* Supply Power (Watts) */
    float temperature; /* Temperature (Â°C) */
    /* GPS coordinates with fixed precision */
    int32_t latitude; /* Latitude in microdegrees (degrees * 10^7) */
    int32_t longitude; /* Longitude in microdegrees (degrees * 10^7) */
    /* Device State */
    uint32_t uptime; /* Device uptime (seconds) */
    int32_t rssi; /* Signal strength (dBm) */
    uint32_t error_code; /* Error code */
    /* Metadata */
    float firmware_version; /* Firmware version */
    float hardware_revision; /* Hardware version */
} Xense_data;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Xense_data_init_default                  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define Xense_data_init_zero                     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Xense_data_hardware_id_tag               1
#define Xense_data_battery_capacity_tag          2
#define Xense_data_absolute_load_power_tag       3
#define Xense_data_load_power_tag                4
#define Xense_data_temperature_tag               5
#define Xense_data_latitude_tag                  6
#define Xense_data_longitude_tag                 7
#define Xense_data_uptime_tag                    11
#define Xense_data_rssi_tag                      12
#define Xense_data_error_code_tag                13
#define Xense_data_firmware_version_tag          19
#define Xense_data_hardware_revision_tag         20

/* Struct field encoding specification for nanopb */
#define Xense_data_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   hardware_id,       1) \
X(a, STATIC,   SINGULAR, FLOAT,    battery_capacity,   2) \
X(a, STATIC,   SINGULAR, FLOAT,    absolute_load_power,   3) \
X(a, STATIC,   SINGULAR, FLOAT,    load_power,        4) \
X(a, STATIC,   SINGULAR, FLOAT,    temperature,       5) \
X(a, STATIC,   SINGULAR, INT32,    latitude,          6) \
X(a, STATIC,   SINGULAR, INT32,    longitude,         7) \
X(a, STATIC,   SINGULAR, UINT32,   uptime,           11) \
X(a, STATIC,   SINGULAR, INT32,    rssi,             12) \
X(a, STATIC,   SINGULAR, UINT32,   error_code,       13) \
X(a, STATIC,   SINGULAR, FLOAT,    firmware_version,  19) \
X(a, STATIC,   SINGULAR, FLOAT,    hardware_revision,  20)
#define Xense_data_CALLBACK NULL
#define Xense_data_DEFAULT NULL

extern const pb_msgdesc_t Xense_data_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Xense_data_fields &Xense_data_msg

/* Maximum encoded size of messages (where known) */
#define PROTO_XENSE_PB_H_MAX_SIZE                Xense_data_size
#define Xense_data_size                          83

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
