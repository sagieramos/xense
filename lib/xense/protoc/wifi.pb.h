/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_XENSE_WIFI_PB_H_INCLUDED
#define PB_XENSE_WIFI_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(6) Xense_Station_bssid_t;
typedef struct _Xense_Station {
  pb_size_t which_target;
  union _Xense_Station_target {
    char ssid[33];
    Xense_Station_bssid_t bssid;
  } target;
  char password[65];
} Xense_Station;

typedef PB_BYTES_ARRAY_T(6) Xense_AccessPoint_bssid_t;
typedef struct _Xense_AccessPoint {
  char ssid[33];
  Xense_AccessPoint_bssid_t bssid;
  int32_t rssi;
  int32_t authmode;
  int32_t channel;
  int32_t pairwise_cipher;
  int32_t bandwidth;
} Xense_AccessPoint;

typedef struct _Xense_ScanResult {
  pb_size_t access_points_count;
  Xense_AccessPoint access_points[20];
} Xense_ScanResult;

#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Xense_Station_init_default                                             \
  { 0, {""}, "" }
#define Xense_AccessPoint_init_default                                         \
  { "", {0, {0}}, 0, 0, 0, 0, 0 }
#define Xense_ScanResult_init_default                                          \
  {                                                                            \
    0, {                                                                       \
      Xense_AccessPoint_init_default, Xense_AccessPoint_init_default,          \
          Xense_AccessPoint_init_default, Xense_AccessPoint_init_default,      \
          Xense_AccessPoint_init_default, Xense_AccessPoint_init_default,      \
          Xense_AccessPoint_init_default, Xense_AccessPoint_init_default,      \
          Xense_AccessPoint_init_default, Xense_AccessPoint_init_default,      \
          Xense_AccessPoint_init_default, Xense_AccessPoint_init_default,      \
          Xense_AccessPoint_init_default, Xense_AccessPoint_init_default,      \
          Xense_AccessPoint_init_default, Xense_AccessPoint_init_default,      \
          Xense_AccessPoint_init_default, Xense_AccessPoint_init_default,      \
          Xense_AccessPoint_init_default, Xense_AccessPoint_init_default       \
    }                                                                          \
  }
#define Xense_Station_init_zero                                                \
  { 0, {""}, "" }
#define Xense_AccessPoint_init_zero                                            \
  { "", {0, {0}}, 0, 0, 0, 0, 0 }
#define Xense_ScanResult_init_zero                                             \
  {                                                                            \
    0, {                                                                       \
      Xense_AccessPoint_init_zero, Xense_AccessPoint_init_zero,                \
          Xense_AccessPoint_init_zero, Xense_AccessPoint_init_zero,            \
          Xense_AccessPoint_init_zero, Xense_AccessPoint_init_zero,            \
          Xense_AccessPoint_init_zero, Xense_AccessPoint_init_zero,            \
          Xense_AccessPoint_init_zero, Xense_AccessPoint_init_zero,            \
          Xense_AccessPoint_init_zero, Xense_AccessPoint_init_zero,            \
          Xense_AccessPoint_init_zero, Xense_AccessPoint_init_zero,            \
          Xense_AccessPoint_init_zero, Xense_AccessPoint_init_zero,            \
          Xense_AccessPoint_init_zero, Xense_AccessPoint_init_zero,            \
          Xense_AccessPoint_init_zero, Xense_AccessPoint_init_zero             \
    }                                                                          \
  }

/* Field tags (for use in manual encoding/decoding) */
#define Xense_Station_ssid_tag 1
#define Xense_Station_bssid_tag 2
#define Xense_Station_password_tag 3
#define Xense_AccessPoint_ssid_tag 1
#define Xense_AccessPoint_bssid_tag 2
#define Xense_AccessPoint_rssi_tag 3
#define Xense_AccessPoint_authmode_tag 4
#define Xense_AccessPoint_channel_tag 5
#define Xense_AccessPoint_pairwise_cipher_tag 6
#define Xense_AccessPoint_bandwidth_tag 7
#define Xense_ScanResult_access_points_tag 1

/* Struct field encoding specification for nanopb */
#define Xense_Station_FIELDLIST(X, a)                                          \
  X(a, STATIC, ONEOF, STRING, (target, ssid, target.ssid), 1)                  \
  X(a, STATIC, ONEOF, BYTES, (target, bssid, target.bssid), 2)                 \
  X(a, STATIC, SINGULAR, STRING, password, 3)
#define Xense_Station_CALLBACK NULL
#define Xense_Station_DEFAULT NULL

#define Xense_AccessPoint_FIELDLIST(X, a)                                      \
  X(a, STATIC, SINGULAR, STRING, ssid, 1)                                      \
  X(a, STATIC, SINGULAR, BYTES, bssid, 2)                                      \
  X(a, STATIC, SINGULAR, INT32, rssi, 3)                                       \
  X(a, STATIC, SINGULAR, INT32, authmode, 4)                                   \
  X(a, STATIC, SINGULAR, INT32, channel, 5)                                    \
  X(a, STATIC, SINGULAR, INT32, pairwise_cipher, 6)                            \
  X(a, STATIC, SINGULAR, INT32, bandwidth, 7)
#define Xense_AccessPoint_CALLBACK NULL
#define Xense_AccessPoint_DEFAULT NULL

#define Xense_ScanResult_FIELDLIST(X, a)                                       \
  X(a, STATIC, REPEATED, MESSAGE, access_points, 1)
#define Xense_ScanResult_CALLBACK NULL
#define Xense_ScanResult_DEFAULT NULL
#define Xense_ScanResult_access_points_MSGTYPE Xense_AccessPoint

extern const pb_msgdesc_t Xense_Station_msg;
extern const pb_msgdesc_t Xense_AccessPoint_msg;
extern const pb_msgdesc_t Xense_ScanResult_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Xense_Station_fields &Xense_Station_msg
#define Xense_AccessPoint_fields &Xense_AccessPoint_msg
#define Xense_ScanResult_fields &Xense_ScanResult_msg

/* Maximum encoded size of messages (where known) */
#define XENSE_WIFI_PB_H_MAX_SIZE Xense_ScanResult_size
#define Xense_AccessPoint_size 97
#define Xense_ScanResult_size 1980
#define Xense_Station_size 100

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
